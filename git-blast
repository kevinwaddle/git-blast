#!/usr/bin/env python
"""
Shows git branches sorted by last commit date, noting when branch has been
merged:

    $ git blast
    * master 33 minutes ago
      some-feature 4 days ago [M]
      dev-branch 4 days ago
      legacy-branch 5 days ago [M]
      another-feature 4 months ago
"""

import subprocess as sp
import sys
import argparse

def get_args(argv):
    """get args.

    Args:
        argv (list): List of arguments.

    Returns:
        argparse.Namespace: Parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description=(
            'show git branches sorted by last commit date'
        )
    )

    parser.add_argument("-f", "--dateformat",
                        help="A git date format: rfc, iso, default, rfc2822, etc. Defaults to relative",
                        default="relative")

    args = parser.parse_args(argv)
    return args

def xcall(cmd):
    return sp.check_output(cmd.split()).decode("utf-8")

C_GREEN = '\033[0;32m'
C_BLUE = '\033[0;34m'
C_RESET = '\033[0;0m'

cur_branch = xcall("git rev-parse --abbrev-ref HEAD").strip()
merged_branches = set([
    x.split()[-1] for x
    in xcall("git branch --merged").splitlines()

])

args = get_args(sys.argv[1:])

by_date = xcall(
    "git for-each-ref --sort=-committerdate refs/heads/ "
    "--format=%(refname:short)%09%(committerdate:{0})".format(args.dateformat)
)
for line in by_date.splitlines():
    branch, _, date = line.partition("\t")
    output = ""
    if branch == cur_branch:
        output += "* %s%s" %(C_GREEN, branch)
    else:
        output += "  %s" %(branch, )
    output += " %s%s%s" %(C_BLUE, date, C_RESET)
    if branch in merged_branches and branch != cur_branch:
        output += " [%sM%s]" %(C_GREEN, C_RESET)
    print(output)
